import java.io.*;
import java.util.*;

/**
 * Tokenizer Class for the Core interpreter project;
 */
public class Tokenizer{

    /**
	 * Private members.
	 */

    //store all of the reserved words and special symbols into two different arrays.
    private static final String[] RESERVED_WORDS = new String[]{"program", "begin", "end", "int", "if", "then", "else", "while", "loop", "read", "write"};
    private static final String[] SPECIAL_SYMBOLS = new String[]{";", "," , "=", "!", "[", "]", "&&", "||", "(", ")", "+", "-", "*", "!=", "==", "<", ">", "<=", ">="};
    //track the current token in the array tokens.
    private int tracker = 0;
    //ArrayList word is used to store the words that are generated by the Java StringTokenizer.
    private ArrayList<String> words;
    //ArrayList tokens is used to store the tokens that are generated by the Core tokenizer.
    private ArrayList<String> tokens;
    //ArrayList values is used to store the numbers corresponding to each token.
    private ArrayList<Integer> values;
    
    /**
	 * Constructor of this class.
	 */
    public Tokenizer() {
        
        //initialize private members.
        this.words = new ArrayList<>();
        this.tokens = new ArrayList<>();
        this.values = new ArrayList<>();

    }

    /**
	 * Get a word list with white spaces eliminated.
	 *
	 * @param lines     list of lines obtained from the input program file.
	 */
    public ArrayList<String> getWords(List<String> lines) {
        
        for(String line : lines) {
            StringTokenizer javaTokenizer = new StringTokenizer(line, " ");
            while(javaTokenizer.hasMoreElements()) {
                this.words.add(javaTokenizer.nextToken());
            }
        }
        return this.words;

    }

    /**
	 * Validate if each word in the word list is a valid token in Core language.
	 *
	 * @param words     a word list with white spaces eliminated.
	 */
    public void tokenize(List<String> words) {

        boolean error = false;
        
        for(String word : words) {
            if(isReservedWord(word) != -1) {
                this.tokens.add(word);
                this.values.add(isReservedWord(word));
                // System.out.println(isReservedWord(word));
            }
            else if(isSpecialSymbol(word) != -1) {
                this.tokens.add(word);
                this.values.add(isSpecialSymbol(word));
                // System.out.println(isSpecialSymbol(word));
            }
            else if(isInteger(word)) {
                this.tokens.add(word);
                this.values.add(31);
                // System.out.println("31");
            }
            else if(isIdentifier(word)) {
                this.tokens.add(word);
                this.values.add(32);
                // System.out.println("32");
            }
            else if(this.isSpecialCase(word)) {
                
            }
            else {
                error = true;
                System.exit(2);
            }
        }
        if(!error) {
            this.tokens.add("EOF");
            this.values.add(33);
            // System.out.println("33");
        }
        
    }

    /**
	 * Return the current token's string value.
	 */
    public String getToken() {
        return this.tokens.get(this.tracker);
    }

    /**
	 * Return the current token's number (1-33).
	 */
    public int getTokenNum() {
        return this.values.get(this.tracker);
    }

    /**
	 * Return the token array tracker value.
	 */ 
    public int getTracker() {
        return this.tracker;
    }
    
    /**
	 * Advance the tracker by 1 to get the next token when possible.
	 */
    public void skipToken() {

        if(this.tracker + 1 < this.tokens.size()) {
            this.tracker++;
        }
 
    }

    /**
	 * Return the integer value of the current token if it's an integer.
	 */
    public int intVal() {

        if(this.values.get(this.tracker) != 31) {
            System.out.println("Parsing error: token no." + this.tracker);
            System.out.println("Current token is " + this.getToken());
            System.out.println("Current token is not an integer.");
            System.out.println("Program terminated.");
            System.exit(2);
        }
        return Integer.parseInt(this.getToken(), 10);

    }

    /**
	 * Return the name of the current token if it's an id.
	 */
    public String idName() {

        if(this.values.get(this.tracker) != 32) {
            System.out.println("Error: token no." + this.tracker);
            System.out.println("Current token is " + this.getToken());
            System.out.println("Current token is not an id.");
            System.out.println("Program terminated.");
            System.exit(2);
        }
        return this.getToken();

    }

    /**
	 * Check if the current token is matched to the keyword.
	 */
    public void matchKeyword(String keyword) {

        String currentToken = this.getToken();
        if(!currentToken.equals(keyword)){
            System.out.println("Parsing error: token no." + this.tracker);
            System.out.println("Current token is " + currentToken);
            System.out.println("Expected " + keyword);
            System.out.println("Program terminated.");
            System.exit(2);
        }
        this.skipToken();
        
    }

    /**
	 * Check if the given word is a reserved word.
	 */
    private static int isReservedWord(String word) {
        
        for(int i = 0; i < RESERVED_WORDS.length; i++) {
            if(word.equals(RESERVED_WORDS[i])) {
                return i + 1;
            }
        }
        return -1;

    }

    /**
	 * Check if the given word is a special symbol.
	 */
    private static int isSpecialSymbol(String word) {
        
        for(int i = 0; i < SPECIAL_SYMBOLS.length; i++) {
            if(word.equals(SPECIAL_SYMBOLS[i])) {
                return i + 12;
            }
        }
        return -1;

    }

    /**
	 * Check if the given word is a valid unsigned integer (max size of 8 digits).
	 */
    private static boolean isInteger(String word) {
        
        boolean res = false;
        
        if(word.length() <= 8) {
            for(int i = 0; i < word.length(); i++) {
                if(!Character.isDigit(word.charAt(i))) {
                    return res;
                }
            }
            res = true;
        }
        return res;

    }

    /**
	 * Check if the given word is a valid identifier (max size of 8 characters):
     * a valid identifier start with a uppercase letter
     * followed by 0 or more uppercase letters
     * and ending with 0 or more digits. 
	 */
    private static boolean isIdentifier(String word) {
        
        boolean res = false;

        if(word.length() <= 8) {
            int i = 0;
            while(i < word.length()) {
                if(!Character.isUpperCase(word.charAt(i))) {
                    break;
                }
                i++;
            }
            while(i < word.length()) {
                if(!Character.isDigit(word.charAt(i))) {
                    return res;
                }
                i++;
            }
            res = true;
        }
        return res;

    }

    /**
	 * Method that handles case where:
     * the word might contain multiple tokens without whitespace between them 
     * due to the sepcial symbol exception.
	 */
    private boolean isSpecialCase(String word) {

        boolean res = true;

        int i = 0;
        while(i < word.length()) {
            //start from the first character.
            char current = word.charAt(i);
            
            //case: if the current character is a special symbol
            if(isSpecialSymbol(String.valueOf(current)) != -1) {
                int j = i + 1;
                if(j < word.length()) {
                    //get the next character
                    char next = word.charAt(j);
                    //Greedy tokenizing:
                    //since the special symbols can contain at most 2 characters
                    //looking ahead for one more character
                    //combine current and next character to see if the combined string match any 2-char special symbol case. 
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append(current);
                    stringBuilder.append(next);
                    //if combined string is a 2-char special symbol, add it and its corresponding value to both lists.
                    if(isSpecialSymbol(stringBuilder.toString()) != -1) {
                        this.tokens.add(stringBuilder.toString());
                        this.values.add(isSpecialSymbol(stringBuilder.toString()));
                        // System.out.println(isSpecialSymbol(stringBuilder.toString()));
                        //set the index to be next unused char.
                        i = j + 1;
                    }
                    //if combined string is not a 2-char symbol, just add the 1-char symbol and its corresponding value to both lists.
                    else {
                        this.tokens.add(String.valueOf(current));
                        this.values.add(isSpecialSymbol(String.valueOf(current)));
                        // System.out.println(isSpecialSymbol(String.valueOf(current)));
                        //set the index to be next unused char.
                        i = j;
                    }
                }
                //if there is no next character to look ahead, add current symbol and its vlaue to both lists.
                else {
                    this.tokens.add(String.valueOf(current));
                    this.values.add(isSpecialSymbol(String.valueOf(current)));
                    // System.out.println(isSpecialSymbol(String.valueOf(current)));
                        i = j;
                }
            }
            //case: current character is not a special symbol.
            else {
                StringBuilder stringBuilder = new StringBuilder();
                //keep collecting characters until a special symbol is found.
                while(i < word.length() && isSpecialSymbol(String.valueOf(word.charAt(i))) == -1) {
                    stringBuilder.append(word.charAt(i));
                    i++;
                }
                //convert the collected characters into a string
                String s = stringBuilder.toString();
                //check if the string matches any valid token case, except the special symbol case.
                if(isReservedWord(s) != -1) {
                    this.tokens.add(s);
                    this.values.add(isReservedWord(s));
                    // System.out.println(isReservedWord(s));
                }
                else if(isInteger(s)) {
                    this.tokens.add(s);
                    this.values.add(31);
                    // System.out.println("31");
                }
                else if(isIdentifier(s)) {
                    this.tokens.add(s);
                    this.values.add(32);
                    // System.out.println("32");
                }
                //if none of the cases is matched, it means that an invalid token exists in the input file.
                //return false to indicate that an invalid token is found.
                else {
                    System.out.println("Parsing error: " + s + " is an invalid token.");
                    System.out.println("Program terminated.");
                    return false;
                }
            }
        }
        //return true when the word is finished and no error is found.
        return res;

    }

}